// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  admin
  member
}

enum TaskStatus {
  pending
  in_progress
  completed
}

enum TasksPriority {
  high
  medium
  low
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  role     UserRoles @default(member)

  createAt  DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  teamMember  TeamMember[]
  task        Task[]
  taskHistory TaskHistory[]

  @@map("users")
}

model Team {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  createAt  DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  teamMember TeamMember[]
  task       Task[]

  @@map("teams")
}

model TeamMember {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")
  teamId Int @map("team_id")

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  createAt DateTime @default(now()) @map("created_at")

  @@map("team_members")
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus    @default(pending)
  priority    TasksPriority
  assignedTo  Int           @map("assigned_to")
  teamId      Int           @map("team_id")

  user User @relation(fields: [assignedTo], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  taskHistory TaskHistory[]

  createAt  DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("tasks")
}

model TaskHistory {
  id        Int @id @default(autoincrement())
  taskId    Int @map("task_id")
  changedBy Int @map("changed_by")

  task    Task @relation(fields: [taskId], references: [id])
  changed User @relation(fields: [changedBy], references: [id])

  oldStatus TaskStatus @map("old_status")
  newStatus TaskStatus @map("new_status")

  changedAt DateTime @default(now()) @map("changed_at")

  @@map("task_history")
}
